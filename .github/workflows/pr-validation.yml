name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# Limit permissions for PR workflows from forks
permissions:
  contents: read
  pull-requests: read

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Only checkout the PR head, not merge commit
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript compilation check
        run: npx tsc --noEmit
        
      - name: Build project
        run: npm run build
        
      - name: Run tests (if available)
        run: npm test --if-present
        
      - name: Security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for secrets in code
        run: |
          # Check for potential hardcoded secrets (excluding legitimate env var usage)
          echo "Checking for potential hardcoded secrets..."
          
          # Check for actual secret values (patterns that look like real secrets)
          SECRET_PATTERNS=(
            "['\"][a-zA-Z0-9]{20,}['\"]"  # Quoted strings that look like tokens
            "sk-[a-zA-Z0-9]{20,}"         # OpenAI API keys
            "ghp_[a-zA-Z0-9]{36}"         # GitHub personal access tokens
            "gho_[a-zA-Z0-9]{36}"         # GitHub OAuth tokens
            "ghu_[a-zA-Z0-9]{36}"         # GitHub user tokens
            "ghs_[a-zA-Z0-9]{36}"         # GitHub server tokens
            "glpat-[a-zA-Z0-9_-]{20,}"    # GitLab personal access tokens
            "xoxb-[a-zA-Z0-9-]+"          # Slack bot tokens
            "xoxa-[a-zA-Z0-9-]+"          # Slack app tokens
          )
          
          FOUND_SECRETS=false
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" src/ --exclude-dir=node_modules 2>/dev/null; then
              echo "‚ùå Potential hardcoded secret found matching pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          # Check for suspicious hardcoded values (but allow env var references)
          if grep -r "password.*=" src/ --exclude-dir=node_modules | grep -v "process.env" | grep -v "console.log\|console.error" 2>/dev/null; then
            echo "‚ùå Potential hardcoded password found"
            FOUND_SECRETS=true
          fi
          
          if [ "$FOUND_SECRETS" = true ]; then
            echo "üö® Potential secrets detected in code!"
            echo "Note: References to process.env.VARIABLE_NAME are OK"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
          
      - name: Validate package.json
        run: |
          # Ensure package.json has required fields
          node -e "
            const pkg = require('./package.json');
            if (!pkg.repository || !pkg.repository.url) {
              console.error('Missing repository URL in package.json');
              process.exit(1);
            }
            if (!pkg.license) {
              console.error('Missing license in package.json');
              process.exit(1);
            }
            console.log('Package.json validation passed');
          "
          
  # Separate job to check that PR doesn't modify sensitive files
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history to check changed files
          
      - name: Check for sensitive file changes
        run: |
          # Get list of changed files in this PR
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          
          # List of sensitive files that require special review
          SENSITIVE_FILES=(
            ".github/workflows/publish-to-npm.yml"
            "package.json"
            ".npmrc"
            ".github/dependabot.yml"
          )
          
          # Check if any sensitive files were modified
          for file in "${SENSITIVE_FILES[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^$file$"; then
              echo "‚ö†Ô∏è  Sensitive file modified: $file"
              echo "This PR modifies sensitive files and requires careful review."
            fi
          done